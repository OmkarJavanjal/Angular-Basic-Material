import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { RouterTestingModule } from '@angular/router/testing';
import { RightBoxComponent } from './right-box.component';
import {
    Component,
    OnInit,
    TemplateRef,
    ViewContainerRef,
    ElementRef,
    AfterViewChecked,
    ViewChild,
    Directive,
    Input,
    Output,
    EventEmitter,
    CUSTOM_ELEMENTS_SCHEMA
} from '@angular/core';
import { Router } from '@angular/router';
import { Location } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { routes } from '../routing/app-routing.module';
import { StudentRegistrationComponent } from '../student-registration/student-registration.component';
import { StudentUpdateComponent } from '../student-update/student-update.component';
import { StudentDetailsComponent } from '../student-details/student-details.component';
import { StudentLoginComponent } from '../student-login/student-login.component';
import { SearchStudentComponent } from '../search-student/search-student.component';
import { SearchProductDetailsComponent } from '../search-product-details/search-product-details.component';
import { LogdinUserDetailComponent } from '../logdin-user-detail/logdin-user-detail.component';
import { LogoutComponent } from '../logout/logout.component';
import { CountryComponent } from '../country/country.component';
import { TimerCountComponent } from '../timer-count/timer-count.component';
import { ControlMessagesComponent } from '../control-messages/control-messages.component';
import { PagenotfoundComponent } from '../pagenotfound/pagenotfound.component';
import { ModalcomponentComponent } from '../modalcomponent/modalcomponent.component';
import { TypeaheadComponent } from '../typeahead/typeahead.component';
import { SetframeComponent } from '../setframe/setframe.component';
import { FrameInfoComponent } from '../frame-info/frame-info.component';
import { LeftBoxComponent } from '../left-box/left-box.component';
import { MainBoxComponent } from '../main-box/main-box.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TypeaheadModule } from 'ngx-bootstrap/typeahead/typeahead.module';
import { DelydirectiveDirective } from '../directive/delydirective.directive';
import { IfdirectiveDirective } from '../directive/ifdirective.directive';
import { LoopdirectiveDirective } from '../directive/loopdirective.directive';
import { StructuraldirectiveDirective } from '../directive/structuraldirective.directive';
import { StudentService } from '../service/student.service';
import { StudentServiceMock } from '../service/student.service.mock';
import { JavascriptComponent } from '../javascript/javascript.component';
import { StockshareComponent } from '../stockshare/stockshare.component';
fdescribe('RightBoxComponent', () => {
    let component: RightBoxComponent;
    let fixture: ComponentFixture<RightBoxComponent>;
    let location: Location;
    let router: Router;

    beforeEach(async(() => {
        TestBed.configureTestingModule({
            schemas: [CUSTOM_ELEMENTS_SCHEMA],
            imports: [
                RouterTestingModule.withRoutes(routes),
                FormsModule,
                ReactiveFormsModule,
                TypeaheadModule.forRoot(),
            ],
            declarations: [
                StudentLoginComponent,
                StudentRegistrationComponent,
                StudentDetailsComponent,
                StudentUpdateComponent,
                PagenotfoundComponent,
                SearchStudentComponent,
                ControlMessagesComponent,
                SearchProductDetailsComponent,
                LogdinUserDetailComponent,
                LogoutComponent,
                TimerCountComponent,
                CountryComponent,
                TypeaheadComponent,
                ModalcomponentComponent,
                SetframeComponent,
                FrameInfoComponent,
                LeftBoxComponent,
                RightBoxComponent,
                MainBoxComponent,
                DelydirectiveDirective,
                IfdirectiveDirective,
                LoopdirectiveDirective,
                StructuraldirectiveDirective,
                JavascriptComponent,
                StockshareComponent
            ],
            providers: [
                { provide: StudentService, useClass: StudentServiceMock }
            ]
        })
            .compileComponents();
    }));
   /** beforeEach(() => {
        fixture = TestBed.createComponent(RightBoxComponent);
        component = fixture.componentInstance
        fixture.detectChanges();
    });**/

    it('should create', () => {
        fixture = TestBed.createComponent(RightBoxComponent);
        component = fixture.componentInstance
        fixture.detectChanges();
        expect(component).toBeTruthy();
    });
    it('should call if invoiceNo  present: increment() ', () => {
        fixture = TestBed.createComponent(RightBoxComponent);
        component = fixture.componentInstance
        fixture.detectChanges();
        component.canIncrement = true;
       component.counterValue ={
            "product": "CPL PREMIER SUB PKG",
            "productDescription": "CPL - Premier Subscription Package",
            "startDate": "2018-08-20T00:00:00",
            "endDate": "2019-08-19T00:00:00",
            "renewalType": 0,
            "totalPrice": 300,
            "quantity": 1,
            "productId": "PREW",
            "productTaxCode": "180510",
            "taxAmount": "0",
            "shippingAmount": "0",
            "discountPercent": "0",
            "incrementBy": 5,
            "itemPrice": 300,
            "invoiceNo": "16546798",
            "lineItemID": "16546798-PREW-1"
          };
          let respObj = {
            "product": "CPL PREMIER SUB PKG",
            "productDescription": "CPL - Premier Subscription Package",
            "startDate": "2018-08-20T00:00:00",
            "endDate": "2019-08-19T00:00:00",
            "renewalType": 0,
            "totalPrice": 300,
            "quantity": 2,
            "productId": "PREW",
            "productTaxCode": "180510",
            "taxAmount": "0",
            "shippingAmount": "0",
            "discountPercent": "0",
            "incrementBy": 0,
            "itemPrice": 300,
            "invoiceNo": "16546798",
            "lineItemID": "16546798-PREW-1"
        };
        component.increment();
        expect(component['counterValue'].hasOwnProperty('invoiceNo')).toBeTruthy();
        component.incrementQty(respObj);
    });
    it('should call if invoiceNo not present : increment() ', () => {
        fixture = TestBed.createComponent(RightBoxComponent);
        component = fixture.componentInstance
        fixture.detectChanges();
        component.canIncrement = true;
        component.counterValue ={
            "product": "CPL PREMIER SUB PKG",
            "productDescription": "CPL - Premier Subscription Package",
            "startDate": "2018-08-20T00:00:00",
            "endDate": "2019-08-19T00:00:00",
            "renewalType": 0,
            "totalPrice": 300,
            "quantity": 2,
            "productId": "PREW",
            "productTaxCode": "180510",
            "taxAmount": "0",
            "shippingAmount": "0",
            "discountPercent": "0",
            "incrementBy": 5,
            "itemPrice": 300,
            "lineItemID": "16546798-PREW-1"
          };
        component.increment();
        expect(component['counterValue'].hasOwnProperty('invoiceNo')).toBeFalsy();
    });
    it('should call if invoiceNo  present: decrement() ', () => {
        fixture = TestBed.createComponent(RightBoxComponent);
        component = fixture.componentInstance
        fixture.detectChanges();
        component.canIncrement = true;
       component.counterValue ={
            "product": "CPL PREMIER SUB PKG",
            "productDescription": "CPL - Premier Subscription Package",
            "startDate": "2018-08-20T00:00:00",
            "endDate": "2019-08-19T00:00:00",
            "renewalType": 0,
            "totalPrice": 300,
            "quantity": 2,
            "productId": "PREW",
            "productTaxCode": "180510",
            "taxAmount": "0",
            "shippingAmount": "0",
            "discountPercent": "0",
            "incrementBy": 2,
            "itemPrice": 300,
            "invoiceNo": "16546798",
            "lineItemID": "16546798-PREW-1"
          };
          let respObj = {
            "product": "CPL PREMIER SUB PKG",
            "productDescription": "CPL - Premier Subscription Package",
            "startDate": "2018-08-20T00:00:00",
            "endDate": "2019-08-19T00:00:00",
            "renewalType": 0,
            "totalPrice": 300,
            "quantity": 2,
            "productId": "PREW",
            "productTaxCode": "180510",
            "taxAmount": "0",
            "shippingAmount": "0",
            "discountPercent": "0",
            "incrementBy": 2,
            "itemPrice": 300,
            "invoiceNo": "16546798",
            "lineItemID": "16546798-PREW-1"
        };
        component.decrement();
        expect(component['counterValue'].hasOwnProperty('invoiceNo')).toBeTruthy();
        component.decrementQty(respObj);
    });
    it('should call if invoiceNo not present : decrement() ', () => {
        fixture = TestBed.createComponent(RightBoxComponent);
        component = fixture.componentInstance
        fixture.detectChanges();
        component.canIncrement = true;
        component.counterValue ={
            "product": "CPL PREMIER SUB PKG",
            "productDescription": "CPL - Premier Subscription Package",
            "startDate": "2018-08-20T00:00:00",
            "endDate": "2019-08-19T00:00:00",
            "renewalType": 0,
            "totalPrice": 300,
            "quantity": 2,
            "productId": "PREW",
            "productTaxCode": "180510",
            "taxAmount": "0",
            "shippingAmount": "0",
            "discountPercent": "0",
            "incrementBy": 2,
            "itemPrice": 300,
            "lineItemID": "16546798-PREW-1"
          };
        component.decrement();
        expect(component['counterValue'].hasOwnProperty('invoiceNo')).toBeFalsy();
    });
});
